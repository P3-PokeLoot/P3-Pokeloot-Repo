# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main
pool:
  vmimage: Windows-latest
resources:
- repo: self
variables:
  buildConfiguration: 'Release'
stages:
# Main API Build, Test, Publish to Sonar Cloud
- stage: API Mains
  jobs:
  - job: apijob
    steps:

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'MainAPI_SonarCloud'
        organization: 'p3pokeloot'
        scannerMode: 'MSBuild'
        projectKey: 'p3pokeloot_Pokeloot_MainAPI'
        projectName: 'p3pokeloot_Pokeloot_MainAPI'
    - task: DotNetCoreCLI@2
      displayName: buildproj
      inputs:
        command: 'build'
        projects: '$(Build.SourcesDirectory)/P2Project/P2Main/P2Main.sln'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: testproj
      inputs:
        command: 'test'
        projects: '$(Build.SourcesDirectory)/P2Project/P2Main/P2Main.sln'
        arguments: '--configuration $(buildConfiguration) --collect "Code Coverage"'
        #workingDirectory: '$(Build.SourcesDirectory)/P2Project/P2Main'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '**/coburtura/coverage.xml'

    - task: SonarCloudAnalyze@1
    - task: SonarCloudPublish@1

# Games API Build, Test, Publish to Sonar Cloud
- stage: API Games
  jobs:
  - job: apijob
    steps:
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'GamesAPI_SonarCloud'
        organization: 'p3pokeloot'
        scannerMode: 'MSBuild'
        projectKey: 'p3pokeloot_Pokeloot_GamesAPI'
        projectName: 'p3pokeloot_Pokeloot_GamesAPI'
    - task: DotNetCoreCLI@2
      displayName: buildproj
      inputs:
        command: 'build'
        projects: '$(Build.SourcesDirectory)/P2Project/P3GamesMicroservice/P3GamesMicroservice.sln'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: testproj
      inputs:
        command: 'test'
        projects: '$(Build.SourcesDirectory)/P2Project/P3GamesMicroservice/P3GamesMicroservice.sln'
        arguments: '--configuration $(buildConfiguration) --collect "Code Coverage"'
        workingDirectory: '$(Build.SourcesDirectory)/P2Project/P3GamesMicroservice'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '**/coburtura/coverage.xml'

    - task: SonarCloudAnalyze@1
    - task: SonarCloudPublish@1

# API Build, Test, Publish to Sonar Cloud
- stage: API Statistics
  jobs:
  - job: apijob
    steps:
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'StatisticsAPI_SonarCloud'
        organization: 'p3pokeloot'
        scannerMode: 'MSBuild'
        projectKey: 'p3pokeloot_Pokeloot_StatisticsAPI'
        projectName: 'p3pokeloot_Pokeloot_StatisticsAPI'
    - task: DotNetCoreCLI@2
      displayName: buildproj
      inputs:
        command: 'build'
        projects: '$(Build.SourcesDirectory)/Statistics-and-Leaderboard/P3_Statistics_API/P3_Statistics_API/P3_Statistics_API.sln'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: testproj
      inputs:
        command: 'test'
        projects: '$(Build.SourcesDirectory)/Statistics-and-Leaderboard/P3_Statistics_API/P3_Statistics_API/P3_Statistics_API.sln'
        arguments: '--configuration $(buildConfiguration) --collect "Code Coverage"'
        workingDirectory: '$(Build.SourcesDirectory)/Statistics-and-Leaderboard/P3_Statistics_API/P3_Statistics_API'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '**/coburtura/coverage.xml'

    - task: SonarCloudAnalyze@1
    - task: SonarCloudPublish@1

# Build Angular for Sonar Cloud
# - stage: Angular
#   jobs:
#   - job: angularjob
#     steps:
#     - task: NodeTool@0
#       inputs:
#         versionSpec: '14.x'
#       displayName: 'Install Node.js'

#     - task: Npm@1
#       inputs:
#         command: 'custom'
#         workingDir: '$(Build.Repository.LocalPath)\P2Project\P2Angular'
#         customCommand: 'install -g @angular/cli'

#     - task: Npm@1
#       inputs:
#         command: 'install'
#         workingDir: '$(Build.Repository.LocalPath)\P2Project\P2Angular'

#     - task: SonarCloudPrepare@1
#       inputs:
#         SonarCloud: 'Angular_SonarCloud'
#         organization: 'p3pokeloot'
#         scannerMode: 'CLI'
#         configMode: 'manual'
#         cliProjectKey: 'p3pokeloot_Pokeloot_Angular'
#         cliProjectName: 'p3pokeloot_Pokeloot_Angular'
#         cliSources: '.'

#     - task: CmdLine@2
#       inputs:
#         script: 'ng build'
#         workingDirectory: '$(Build.Repository.LocalPath)\P2Project\P2Angular'        

#     - task: SonarCloudAnalyze@1
    
#     - task: SonarCloudPublish@1
#       inputs:
#         pollingTimeoutSec: '300'


# Create Docker containers and push to repo
# Angular Docker container
# - stage: BuildAngular
#   displayName: Build image
#   jobs:
#   - job: Build
#     displayName: Build
#     steps:
#     - task: Docker@2
#       inputs:
#         containerRegistry: 'DockerHub'
#         repository: 'gregious/p3angular'
#         command: 'build'
#         Dockerfile: '$(Build.SourcesDirectory)/P2Project/P2Angular/Dockerfile'
#     - task: Docker@2
#       inputs:
#         containerRegistry: 'DockerHub'
#         repository: 'gregious/p3angular'
#         command: 'push'
#         tags: 'gregious/$(Build.BuildId)'
#         addPipelineData: false
#         addBaseImageData: false

# Main API Docker container      
- stage: BuildMain
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'gregious/p3mainapi'
        tags: '$(Build.BuildId)'
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/P2Project/P2Main/Dockerfile'
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'gregious/p3mainapi'
        tags: '$(Build.BuildId)'
        command: 'push'
        addPipelineData: false
        addBaseImageData: false

# Statistics API Docker container
- stage: BuildStatistics
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'gregious/p3statisticsapi'
        tags: '$(Build.BuildId)'
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/Statistics-and-Leaderboard/P3_Statistics_API/Dockerfile'
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'gregious/p3statisticsapi'
        tags: '$(Build.BuildId)'
        command: 'push'
        addPipelineData: false
        addBaseImageData: false   

# Games API Docker container
- stage: BuildGames
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'gregious/p3gamesapi'
        tags: '$(Build.BuildId)'
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/P2Project/P3GamesMicroservice/Dockerfile'
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'gregious/p3gamesapi'
        tags: '$(Build.BuildId)'
        command: 'push'
        addPipelineData: false
        addBaseImageData: false   

    # Deploy images to kubernetes
- stage: DeployKube
  displayName: Deploy to Kubernetes
  jobs:
  - job: Deploy
    displayName: Deploy
    steps:
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'kubernetes cluster'
        namespace: 'pokeloot'
        manifests: '$(Build.SourcesDirectory)/deployment.yml'
        containers: |
          'gregious/p3mainapi:$(Build.BuildId)'
          'gregious/p3gamesapi:$(Build.BuildId)'
          'gregious/p3statisticsapi:$(Build.BuildId)'
          'gregious/p3angular:$(Build.BuildId)'
    