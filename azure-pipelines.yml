# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main
pool:
  vmimage: Ubuntu-latest
resources:
- repo: self
variables:
  buildConfiguration: 'Release'

stages:
# Build, test, and publish test results to sonar cloud
- stage: P2MainSonarCloud
  displayName: P2 Main Sonar Cloud
  jobs:
  # Main API Build, Test, Publish to Sonar Cloud
  - job: P2Main
    steps:
      
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'MainAPI_SonarCloud'
        organization: 'p3pokeloot'
        scannerMode: 'MSBuild'
        projectKey: 'p3pokeloot_Pokeloot_MainAPI'
        projectName: 'p3pokeloot_Pokeloot_MainAPI'
        extraProperties: |
          sonar.cs.vstest.reportsPaths='$(Agent.TempDirectory)\**\*.trx
          sonar.cs.vscoveragexml.reportsPaths='$(Agent.TempDirectory)/**/coverage.cobertura.xml

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '$(Build.SourcesDirectory)/P2Project/P2Main/P2Main.sln'
        arguments: '--configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
        publishTestResults: true
        projects: '$(Build.SourcesDirectory)/P2Project/P2Main/P2Main.sln'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

    - task: SonarCloudAnalyze@1

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

# Create Docker containers and push to repo
# Angular Docker container
# - stage: BuildAngular
#   displayName: Build image
#   jobs:
#   - job: Build
#     displayName: Build
#     steps:
#     - task: Docker@2
#       inputs:
#         containerRegistry: 'DockerHub'
#         repository: 'gregious/p3angular'
#         command: 'build'
#         Dockerfile: '$(Build.SourcesDirectory)/P2Project/P2Angular/Dockerfile'
#     - task: Docker@2
#       inputs:
#         containerRegistry: 'DockerHub'
#         repository: 'gregious/p3angular'
#         command: 'push'
#         tags: 'gregious/$(Build.BuildId)'
#         addPipelineData: false
#         addBaseImageData: false

# Main API Docker container      
- stage: BuildMain
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'gregious/p3mainapi'
        tags: '$(Build.BuildId)'
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/P2Project/P2Main/Dockerfile'
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'gregious/p3mainapi'
        tags: '$(Build.BuildId)'
        command: 'push'
        addPipelineData: false
        addBaseImageData: false

# Statistics API Docker container
- stage: BuildStatistics
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'gregious/p3statisticsapi'
        tags: '$(Build.BuildId)'
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/Statistics-and-Leaderboard/P3_Statistics_API/Dockerfile'
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'gregious/p3statisticsapi'
        tags: '$(Build.BuildId)'
        command: 'push'
        addPipelineData: false
        addBaseImageData: false   

# Games API Docker container
- stage: BuildGames
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'gregious/p3gamesapi'
        tags: '$(Build.BuildId)'
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/P2Project/P3GamesMicroservice/Dockerfile'
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'gregious/p3gamesapi'
        tags: '$(Build.BuildId)'
        command: 'push'
        addPipelineData: false
        addBaseImageData: false   

    # Deploy images to kubernetes
- stage: DeployKube
  displayName: Deploy to Kubernetes
  jobs:
  - job: Deploy
    displayName: Deploy
    steps:
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'kubernetes cluster'
        namespace: 'pokeloot'
        manifests: '$(Build.SourcesDirectory)/deployment.yml'
        containers: |
          'gregious/p3mainapi:$(Build.BuildId)'
          'gregious/p3gamesapi:$(Build.BuildId)'
          'gregious/p3statisticsapi:$(Build.BuildId)'
          'gregious/p3angular:$(Build.BuildId)'
    