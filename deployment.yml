---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: p3angular
  labels:
    app: p3angular
  annotations:
spec:
  selector:
    matchLabels:
      app: p3angular
  replicas: 2
  # strategy:
  #   type: RollingUpdate
  #     maxSurge: 1
  #     maxUnavailible: 0
  template:
    metadata:
      labels:
        app: p3angular
    spec:
      containers:
      - name: p3angular
        image: gregious/p3angular:presentation
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
        # livenessProbe:
        #   httpGet:
        #     path: /status
        #     port: 5000
        #   initialDelaySeconds: 3
        #   periodSeconds: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: angular
spec:
  ports:
    - port: 8080
      targetPort: 80
  selector:
    app: p3angular
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: p3mainapi
  labels:
    app: p3mainapi
  annotations:
spec:
  selector:
    matchLabels:
      app: p3mainapi
  replicas: 2
  # strategy:
  #   type: RollingUpdate
  #     maxSurge: 1
  #     maxUnavailible: 0
  template:
    metadata:
      labels:
        app: p3mainapi
    spec:
      containers:
      - name: p3mainapi
        image: gregious/p3mainapi:presentation
        imagePullPolicy: Always
        env:
          - name: ConnectionStrings__P3Database
            valueFrom:
              secretKeyRef:
                name: p3connection
                key: string
        ports:
        - name: http
          containerPort: 8081
        # livenessProbe:
        #   httpGet:
        #     path: /status
        #     port: 5000
        #   initialDelaySeconds: 3
        #   periodSeconds: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: main
spec:
  ports:
  - port: 8081
    targetPort: 80
  selector:
    app: p3mainapi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: p3gamesapi
  labels:
    app: p3gamesapi
  annotations:
spec:
  selector:
    matchLabels:
      app: p3gamesapi
  replicas: 2
  # strategy:
  #   type: RollingUpdate
  #     maxSurge: 1
  #     maxUnavailible: 0
  template:
    metadata:
      labels:
        app: p3gamesapi
    spec:
      containers:
      - name: p3gamesapi
        image: gregious/p3gamesapi:presentation
        imagePullPolicy: Always
        env:
          - name: ConnectionStrings__P3Database
            valueFrom:
              secretKeyRef:
                name: p3connection
                key: string
        ports:
        - name: http
          containerPort: 8082
        # livenessProbe:
        #   httpGet:
        #     path: /status
        #     port: 5000
        #   initialDelaySeconds: 3
        #   periodSeconds: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: game
spec:
  ports:
  - port: 8082
    targetPort: 80
  selector:
    app: p3gamesapi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: p3statisticsapi
  labels:
    app: p3statisticsapi
  annotations:
spec:
  selector:
    matchLabels:
      app: p3statisticsapi
  replicas: 2
  # strategy:
  #   type: RollingUpdate
  #     maxSurge: 1
  #     maxUnavailible: 0
  template:
    metadata:
      labels:
        app: p3statisticsapi
    spec:
      containers:
      - name: p3statisticsapi
        image: gregious/p3statisticsapi:presentation
        imagePullPolicy: Always
        env:
          - name: ConnectionStrings__P3Database
            valueFrom:
              secretKeyRef:
                name: p3connection
                key: string
        ports:
        - name: http
          containerPort: 8083
        # livenessProbe:
        #   httpGet:
        #     path: /status
        #     port: 5000
        #   initialDelaySeconds: 3
        #   periodSeconds: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: statistic
spec:
  ports:
  - port: 8083
    targetPort: 80
  selector:
    app: p3statisticsapi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-ingress
  namespace: pokeloot
  annotations:
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-origin: "20.106.65.153"
    nginx.ingress.kubernetes.io/cors-allow-headers: "*"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/issuer: "letsencrypt-prod"
    # certmanager.k8s.io/acme-challenge-type: http01
spec:
  tls:
  - hosts: 
    - p3pokeloot.com
    secretName: p3pokeloot-prod-certificate
  rules:
  - host: p3pokeloot.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: angular
            port:
              number: 80
      - path: /api/P3/
        pathType: Prefix
        backend:
          service:
            name: main
            port:
              number: 80
      - path: /api/Games
        pathType: Prefix
        backend:
          service:
            name: game
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: statistic
            port:
              number: 80